# 类
# 类的概念在许多语言中出现，很容易理解。它将数据和操作进行封装，以便将来的复用。
#
# 模块（与java的模块有出入，java中模块的概念高于包）
# python 的模块可以定义很多类和代码这和 java中的类是和文件绑定的不同，python没有具体分割到类这一层的描述和文件体系
# 模块，在Python可理解为对应于一个文件。在创建了一个脚本文件后，定义了某些函数和变量。
# 你在其他需要这些功能的文件中，导入这模块，就可重用这些函数和变量。一般用module_name.fun_name，和module_name.var_name进行使用。
# 这样的语义用法使模块看起来很像类或者名字空间，可将module_name 理解为名字限定符。模块名就是文件名去掉.py后缀。

# 包（类似java包的概念）
# 通常包总是一个目录，可以使用import导入包，或者from + import来导入包中的部分模块。包目录下为首的一个文件便是 __init__.py。
# 然后是一些模块文件和子目录，假如子目录中也有 __init__.py 那么它就是这个包的子包了。
# 在创建许许多多模块后，我们可能希望将某些功能相近的文件组织在同一文件夹下，这里就需要运用包的概念了。
# 包对应于文件夹，使用包的方式跟模块也类似，唯一需要注意的是，当文件夹当作包使用时，文件夹需要包含__init__.py文件，
# 主要是为了避免将文件夹名当作普通的字符串。__init__.py的内容可以为空，一般用来进行包的某些初始化工作或者设置__all__值，
# __all__是在from package-name import *这语句使用的，全部导出定义过的模块。

# import
# from  ... import ...
# __all__ 的概念类似java9中的模块描述文件 module-info.java
# 模块定义的公共名称是通过检查名为__all__的变量的模块名称空间来确定的; 如果定义了它，
# 它必须是由该模块定义或导入的名称的字符串序列。 __all__中给出的名称都被认为是公开的，并且必须存在。
#  如果未定义__all__，则公共名称集合将包含在模块名称空间中找到的所有不以下划线字符（'_'）开头的名称。
# __all__应该包含整个公共API。 它旨在避免意外导出不属于API的项目（例如在模块中导入和使用的库模块）。

# Functions such as importlib.import_module() and built-in __import__() can also be used to invoke the import machinery.

__import__("imge")


